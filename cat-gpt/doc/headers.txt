INFO: STARt
This library is intended to talk directly to the linux kernel
with no c library in the way.  Im interested in findin out if 
you can see where I am going with is, and give me some inspiration
on how to turn it into a useful project.

It's really just a proof of concept thus far. but I like the concept.

There is an implmentation, but you choked on the whole thing, so I am
going to try  a piece at a time.

INFO: END
FILE: 0: inc/errno.hh
0: #ifndef errno_hh
0: #define errno_hh errno_hh
0: 
0: #include <types.hh>
0: 
0: #define	EPERM		 1	/* Operation not permitted */
0: #define	ENOENT		 2	/* No such file or directory */
0: #define	ESRCH		 3	/* No such process */
0: #define	EINTR		 4	/* Interrupted system call */
0: #define	EIO		 5	/* I/O error */
0: #define	ENXIO		 6	/* No such device or address */
0: #define	E2BIG		 7	/* Argument list too long */
0: #define	ENOEXEC		 8	/* Exec format error */
0: #define	EBADF		 9	/* Bad file number */
0: #define	ECHILD		10	/* No child processes */
0: #define	EAGAIN		11	/* Try again */
0: #define	ENOMEM		12	/* Out of memory */
0: #define	EACCES		13	/* Permission denied */
0: #define	EFAULT		14	/* Bad address */
0: #define	ENOTBLK		15	/* Block device required */
0: #define	EBUSY		16	/* Device or resource busy */
0: #define	EEXIST		17	/* File exists */
0: #define	EXDEV		18	/* Cross-device link */
0: #define	ENODEV		19	/* No such device */
0: #define	ENOTDIR		20	/* Not a directory */
0: #define	EISDIR		21	/* Is a directory */
0: #define	EINVAL		22	/* Invalid argument */
0: #define	ENFILE		23	/* File table overflow */
0: #define	EMFILE		24	/* Too many open files */
0: #define	ENOTTY		25	/* Not a typewriter */
0: #define	ETXTBSY		26	/* Text file busy */
0: #define	EFBIG		27	/* File too large */
0: #define	ENOSPC		28	/* No space left on device */
0: #define	ESPIPE		29	/* Illegal seek */
0: #define	EROFS		30	/* Read-only file system */
0: #define	EMLINK		31	/* Too many links */
0: #define	EPIPE		32	/* Broken pipe */
0: #define	EDOM		33	/* Math argument out of domain of func */
0: #define	ERANGE		34	/* Math result not representable */
0: 
0: 
0: struct c_str;
0: namespace sys {
0:   typedef long errno_t;
0:   extern errno_t errno;
0:   ssize_t set_errno(errno_t err);
0:   const c_str &strerror(errno_t err=errno);
0:   void perror(const c_str &msg1, const c_str &msg2);
0:   void pexit(const c_str &msg1, const c_str &msg2);
0:   void perror(const c_str &msg1);
0:   void pexit(const c_str &msg1);
0: };
0: 
0: #endif
FILE: 1: inc/stdlib.hh
FILE: 1: inc/stdlib.hh
1: #ifndef stdlib_hh
1: #define stdlib_hh stdlib_hh
1: 
1: #include <types.hh>
1: extern "C"
1: {
1:   extern void*  malloc(size_t);
1:   extern void   free(void*);
1:   extern void*  realloc(void* ptr, size_t size);
1:   inline void*  sbrk(intptr_t increment) AAI;
1:   inline int    strcmp(const char* s1, const char* s2) AAI;
1:   inline void*  memset(void* s, int c, size_t n) AAI;
1:   inline void*  memcpy(void* dst, const void* src, size_t n) AAI;
1:   inline int    memcmp(const void* dst, const void* src, size_t n) AAI;
1:   inline void*  memmove(void* dst, const void* src, size_t n) AAI;
1:   inline void*  memchr(const void* _mem, int c, size_t n) AAI;
1:   inline char*  strcpy(char* d, const char* s) AAI;
1:   inline char*  strncpy(char* dst, const char* src, size_t n) AAI;
1:   inline char*  strncpy(char* dst, const char* src, size_t n) AAI;
1:   inline size_t strlen(const char* s) AAI;
1:   inline void*  memmove(void* _dst, const void* _src, size_t n)
1:   {
1:     char*       dst((char*)_dst);
1:     const char* src((const char*)_src);
1:     if(dst < src || dst > src + n)
1:       return memcpy(dst, src, n);
1:     while(n--)
1:       dst[n]= src[n];
1:     return dst;
1:   }
1:   void         exit(int res);
1:   inline void* memchr(const void* _mem, int c, size_t n)
1:   {
1:     const char* mem= (const char*)_mem;
1:     for(size_t i= 0; i < n; i++)
1:       if(mem[i] == c)
1:         return (void*)&mem[i];
1:     return nullptr;
1:   };
1:   inline size_t strcspn(const char* s, const char* reject)
1:   {
1:     char rej[256];
1:     memset(rej, 0, sizeof(rej));
1:     while(*reject)
1:       rej[*reject++]= 1;
1:     rej[0]  = 1;
1:     size_t i= 0;
1:     while(!rej[s[i]])
1:       ++i;
1:     return i;
1:   };
1:   inline char* strchr(const char* s, int c)
1:   {
1:     char ch;
1:     while((ch= *s++) != c)
1:     {
1:       if(!ch)
1:         return nullptr;
1:     }
1:     return (char*)s;
1:   };
1:   inline int strncmp(const char* lhs, const char* rhs, size_t n)
1:   {
1:     for(int i= 0; i < n; i++)
1:     {
1:       int res= lhs[i] - rhs[i];
1:       if(res)
1:         return res;
1:       if(!lhs[i])
1:         break;
1:     };
1:     return 0;
1:   };
1:   inline size_t strlen(const char* s)
1:   {
1:     const char* p(s);
1:     while(*p)
1:       ++p;
1:     return p - s;
1:   };
1:   inline int strcmp(const char* s1, const char* s2)
1:   {
1:     for(;;)
1:     {
1:       int d= *s1 - *s2;
1:       if(d)
1:         return d < 0 ? -1 : 1;
1:       if(!*s1)
1:         return 0;
1:       ++s1, ++s2;
1:     };
1:   };
1:   inline void* memset(void* s, int c, size_t n)
1:   {
1:     char* b= (char*)s;
1:     for(int i= 0; i < n; i++)
1:       b[i]= c;
1:     return s;
1:   };
1:   inline void* memcpy(void* dest, const void* src, size_t n)
1:   {
1:     char *d((char*)dest), *s((char*)src);
1:     for(int i= 0; i < n; i++)
1:       d[i]= s[i];
1:     return dest;
1:   };
1:   inline int memcmp(const void* _s1, const void* _s2, size_t n)
1:   {
1:     int         res= 0;
1:     const char* s1 = (const char*)_s1;
1:     const char* s2 = (const char*)_s2;
1:     for(size_t i= 0; i < n; i++)
1:     {
1:       if((res= s1[i] - s2[i]))
1:         break;
1:     };
1:     return res;
1:   };
1:   inline char* strcpy(char* d, const char* s)
1:   {
1:     size_t p= 0;
1:     for(;;)
1:     {
1:       if(not(d[p]= s[p]))
1:         return d;
1:       ++p;
1:     };
1:   };
1:   inline char* strncpy(char* dst, const char* src, size_t n)
1:   {
1:     size_t i;
1: 
1:     for(i= 0; i < n && src[i] != '\0'; i++)
1:       dst[i]= src[i];
1:     for(; i < n; i++)
1:       dst[i]= '\0';
1: 
1:     return dst;
1:   }
1: }
1: 
1: #endif
FILE: 2: inc/syscall.hh
FILE: 2: inc/syscall.hh
2: #ifndef syscall_hh
2: #define syscall_hh syscall_hh
2: 
2: #include <errno.hh>
2: #include <types.hh>
2: 
2: #if 1
2: #define AAI __attribute__((__always_inline__))
2: #define NOR  __attribute__((__noreturn__))
2: #else
2: #define AAI
2: #endif
2: 
2: namespace sys
2: {
2: #define linux_dirent64 linux_dirent
2:   enum open_mode
2:   {
2:     o_default= 0664
2:   };
2:   enum open_flags
2:   {
2:     o_rdonly   = 0000,
2:     o_wronly   = 0001,
2:     o_rdwr     = 0002,
2:     o_mask     = 0003,
2:     o_creat    = 00000100,
2:     o_excl     = 00000200,
2:     o_noctty   = 00000400,
2:     o_trunc    = 00001000,
2:     o_append   = 00002000,
2:     o_nonblock = 00004000,
2:     o_dsync    = 00010000,
2:     o_fasync   = 00020000,
2:     o_direct   = 00040000,
2:     o_largefile= 00100000,
2:     o_directory= 00200000,
2:     o_nofollow = 00400000,
2:     o_noatime  = 01000000,
2:     o_cloexec  = 02000000,
2:   };
2:   inline open_flags operator|(open_flags lhs, open_flags rhs)
2:   {
2:     return open_flags(int(lhs) | int(rhs));
2:   }
2:   inline open_flags operator&(open_flags lhs, open_flags rhs)
2:   {
2:     return open_flags(int(lhs) & int(rhs));
2:   }
2: } // namespace sys
2: 
2: #include <stdlib.hh>
2: #define chk_return2(val, cast)                                            \
2:   return (cast)(val < 0 ? set_errno(val) : val)
2: #define chk_return(val) return (val < 0 ? set_errno(val) : val)
2: namespace sys
2: {
2:   extern "C"
2:   {
2:     inline int     nanosleep(timespec_p rqtp, timespec_p rmtp) AAI;
2:     inline int     close(fd_t fd) AAI;
2:     inline int     stat(const char* pathname, struct stat* statbuf) AAI;
2:     inline fd_t    open(const char* pathname,
2:                         open_flags  flags,
2:                         open_mode   mode) AAI;
2:     inline time_t  time(time_t*) AAI;
2:     inline ssize_t getdents(fd_t fd, linux_dirent64* buf, size_t len) AAI;
2:     inline ssize_t read(fd_t fd, char* buf, size_t len) AAI;
2:     inline ssize_t sys_write(fd_t fd, const char* buf, size_t len) AAI;
2:   }
2:   inline void    exit(int res) NOR;
2: 
2:   // __NR_read=0
2:   inline ssize_t read(fd_t fd, char* buf, size_t len)
2:   {
2:     long res;
2:     asm("syscall"
2:         : "=a"(res)
2:         : "a"(0), "D"(fd), "S"(buf), "d"(len)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR_write=1
2:   inline ssize_t sys_write(fd_t fd, const char* buf, size_t len)
2:   {
2:     long res;
2:     if(!buf) {
2:       buf="<null>";
2:       len=6;
2:     };
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(1), "D"(fd), "S"(buf), "d"(len)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR_open=2
2:   inline fd_t open(const char* pathname,
2:                    open_flags  flags,
2:                    open_mode   mode= o_default)
2:   {
2:     int fd= -1;
2:     asm("syscall\n"
2:         : "=a"(fd)
2:         : "0"(2), "D"(pathname), "S"(flags), "d"(mode)
2:         : "rcx", "r11", "memory");
2:     chk_return(fd);
2:   }
2:   // __NR_close=3
2:   inline int close(fd_t fd)
2:   {
2:     asm("syscall\n"
2:         : "=a"(fd) 
2:         : "0"(3), "D"(fd) 
2:         : "rcx", "r11", "memory");
2:     chk_return(fd);
2:   }
2:   // __NR_stat=4
2:   inline int stat(const char* pathname, struct stat* statbuf)
2:   {
2:     int res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(4), "D"(pathname), "S"(statbuf)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR__ lseek = 8
2:   // inline int lseek(fd_t fd, off_t offset, unsigned origin)
2:   enum origin_t
2:   {
2:     set= 0,
2:     cur= 1,
2:     end= 2
2:   };
2:   inline off_t lseek(fd_t fd, off_t off, origin_t origin)
2:   {
2:     off_t res;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "0"(8), "D"(fd), "S"(off), "d"(origin)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2: 
2: 
2:   enum mmap_prot_t
2:   {
2:     // For MMAP.
2:     prot_none = 0x0,
2:     prot_read = 0x1,
2:     prot_write= 0x2,
2:     prot_exec = 0x4,
2:   };
2: 
2: 
2:   enum mmap_flag_t
2:   {
2:     map_private  = 0x02,
2:     map_shared   = 0x01,
2:     map_fixed    = 0x10,
2:     map_anon     = 0x20,
2:     map_anonymous= map_anon,
2:     map_growsdown= 0x00100,
2:     map_noreserve= 0x04000,
2:     map_nonblock = 0x10000,
2:     map_populate = 0x08000,
2:     map_stack    = 0x20000,
2:   };
2:   // __NR_mmap=9
2:   inline char* mmap(void*  addr,
2:                     size_t length,
2:                     int    prot,
2:                     int    flags,
2:                     fd_t   fd,
2:                     off_t  off)
2:   {
2: 
2:     uint64_t res;
2: 
2:     __asm__ volatile(
2:              "\tmovq %5,%%r10 ;\n"
2:              "\tmovq %6,%%r8 ;\n"
2:              "\tmovq %7, %%r9; \n"
2:              "\tsyscall;\n"
2:              : "=a"(res)
2:              : "0"(9),
2:                "D"(addr),
2:                "S"(length),
2:                "d"(prot),
2:                "g"(flags),
2:                "g"(long(fd)),
2:                "g"(long(off))
2:              : "r11", "rcx", "memory", "r10", "r8", "r9");
2: 
2:     chk_return2(res, char*);
2:   }
2:   // __NR_sigaction = 13
2:   inline int rt_sigaction(int sig, sigaction_p act, sigaction_p oact)
2:   {
2: 
2:     uint64_t res;
2: 
2:     asm("\tmovq %5,%%r10 ;\n"
2:         "\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(13), "D"(sig), "S"(act), "d"(oact), "g"(sizeof(sigset_t))
2:         : "r11", "rcx", "memory");
2: 
2:     chk_return(res);
2:   }
2:   // __NR_sigprocmask=14
2:   inline int rt_sigprocmask(int how, sigset_p nset, sigset_p oset)
2:   {
2:     int res= -1;
2:     asm("\tmovq %5,%%r10 ;\n"
2:         "\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(14), "D"(how), "S"(nset), "d"(oset), "g"(sizeof(sigset_t))
2:         : "r11", "rcx", "memory");
2: 
2:     chk_return(res);
2:   }
2:   // __NR_sigreturn=15
2:   inline void rt_sigreturn()
2:   {
2:     int res= -1;
2:     asm("syscall\n" : "=a"(res) : "0"(15) : "rcx", "r11", "memory");
2:     if(res < 0)
2:       set_errno(res);
2:   }
2:   // __NR__ pipe = 22 
2: 
2:   inline int pipe(fd_p fds)
2:   {
2:     time_t res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(22), "D"(fds)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   //     }
2:   //     inline char *mmap(
2:   //         void *addr, size_t length, int prot, int flags, fd_t fd, off_t
2:   //         off
2:   //         )
2:   // __NR__ select = 23
2:   inline int select(int       n,
2:                     fd_set_p  inp,
2:                     fd_set_p  outp,
2:                     fd_set_p  exp,
2:                     timeval_p tvp= 0)
2:   {
2: 
2:     uint64_t res;
2: 
2:     __asm__ volatile(
2:              "\tsyscall;\n"
2:              : "=a"(res)
2:              : "0"(23), "D"(n), "S"(inp), "d"(outp), "g"(exp), "g"(tvp)
2:              : "rcx", "memory", "r8", "r9");
2: 
2:     chk_return(res);
2:   }
2: 
2:   // __NR_dup = 32
2:   inline int dup(fd_t fd)
2:   {
2:     int res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "0"(32), "D"(fd)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2: 
2:   // __NR_dup = 33
2:   inline int dup2(fd_t ofd, fd_t nfd)
2:   {
2:     int res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(33), "D"(ofd), "S"(nfd)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR_nanosleep = 35
2:   inline int nanosleep(timespec_p rqtp, timespec_p rmtp)
2:   {
2:     uint64_t res= 0xfeebdaed;
2:     asm("\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(35), "D"(rqtp), "S"(rmtp)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2: 
2:   inline int sleep(time_t secs)
2:   {
2:     uint64_t res= 0xfeebdaed;
2:     timespec_t rqtp, rmtp;
2: 
2:     rqtp.tv_sec=secs;
2:     rqtp.tv_nsec=0;
2:     rmtp.tv_sec=0;
2:     rmtp.tv_nsec=0;
2:     asm("\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(35), "D"(&rqtp), "S"(&rmtp)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR_alarm = 37
2:   inline int alarm(unsigned long delay)
2:   {
2:     int res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "0"(37), "D"(delay)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR_getpid = 39
2:   inline int getpid()
2:   {
2:     int res= -1;
2:     asm("syscall\n" : "=a"(res) : "0"(39) : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR__ fork = 57 
2:   inline int fork()
2:   {
2:     int res= -1;
2:     asm("syscall\n" : "=a"(res) : "0"(57) : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NO__ execve = 59
2:   inline int execve(const char * fn, char *const * argv, char *const * envp)
2:   {
2:     long res;
2:     asm("syscall"
2:         : "=a"(res)
2:         : "a"(59), "D"(fn), "S"(argv), "d"(envp)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2: 
2:   }
2:   // __NR_exit = 60
2:   inline void exit(int res)
2:   {
2:     int exit_val;
2:     exit_val= res & 0xff;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(60), "D"(exit_val)
2:         : "rcx", "r11", "memory");
2:     while(1)
2:       sleep(1);
2:   }
2: 
2:   // __NR__ wait4 = 61 
2: 
2:   inline int wait4(pid_t upid, int32_p stat_p, int opt, rusage_p ru)
2:   {
2: 
2:     uint64_t res;
2: 
2:     __asm__ volatile(
2:              "\tsyscall;\n"
2:              : "=a"(res)
2:              : "0"(61), "D"(upid), "S"(stat_p), "d"(opt), "g"(ru)
2:              : "rcx", "memory", "r8", "r9");
2: 
2:     chk_return(res);
2:   }
2:   inline int waitpid(pid_t pid, int32_p wstat, int opt)
2:   {
2:     return wait4(pid,wstat,opt,NULL);
2:   }
2:   inline int wait(int32_p wstat)
2:   {
2:     return waitpid(-1,wstat,0);
2:   }
2: 
2:   // __NR__ kill=62
2:   inline int kill(pid_t pid, int sig)
2:   {
2:     uint64_t res= 0xfeebdaed;
2:     asm("\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(62), "D"(pid), "S"(sig)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2: 
2:   // __NR__ uname = 63 
2: 
2:   inline int uname(utsname_p name)
2:   {
2:     time_t res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(63), "D"(name)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2: 
2:   // __NR__ rename = 82
2:   inline int rename(istr_t oldname, istr_t newname)
2:   {
2:     uint64_t res= 0xfeebdaed;
2:     asm("\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(82), "D"(oldname), "S"(newname)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   //#define __NR_time 201
2:   inline time_t time(time_t* buf)
2:   {
2:     time_t res= -1;
2:     asm("syscall\n"
2:         : "=a"(res)
2:         : "a"(201), "D"(buf)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR_getdents = 217
2:   inline ssize_t getdents(fd_t fd, linux_dirent64* buf, size_t len)
2:   {
2:     long res;
2:     asm("syscall"
2:         : "=a"(res)
2:         : "a"(217), "D"(fd), "S"(buf), "d"(len)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2:   // __NR__ pipe2 = 293 
2: 
2:   inline int pipe2(fd_p fds, int flags)
2:   {
2:     uint64_t res= 0xfeebdaed;
2:     asm("\tsyscall;\n"
2:         : "=a"(res)
2:         : "0"(293), "D"(fds), "S"(flags)
2:         : "rcx", "r11", "memory");
2:     chk_return(res);
2:   }
2: } // namespace sys
2: 
2: namespace sys
2: {
2: 
2:   inline ssize_t write(int fd, const char* buf, size_t len) AAI;
2:   inline ssize_t write(int fd, const char* buf, const char* end) AAI;
2:   inline ssize_t write(fd_t fd, const char* buf) AAI;
2: 
2:   inline ssize_t write(int fd, const char* buf, size_t len)
2:   {
2:     return sys_write(fd, buf, len);
2:   }
2:   inline ssize_t write(int fd, const char* buf, const char* end)
2:   {
2:     return sys_write(fd, buf, end - buf);
2:   }
2: 
2:   inline ssize_t write(fd_t fd, const char* buf)
2:   {
2:     const char* end= buf;
2:     while(*end)
2:       ++end;
2:     return sys_write(fd, buf, end - buf);
2:   }
2: 
2:   inline ssize_t full_write(int fd, const char* const beg, size_t len)
2:     AAI;
2:   inline const char* full_write(int               fd,
2:                                 const char* const beg,
2:                                 const char*       end)
2:     AAI;
2: 
2:   inline const char* full_write(int               fd,
2:                                 const char* const beg,
2:                                 const char*       end)
2:   {
2:     const char* pos= beg;
2:     while(pos != end)
2:     {
2:       ssize_t res= sys_write(fd, pos, end - pos);
2:       if(res < 0)
2:         return nullptr;
2:       pos+= res;
2:     }
2:     return pos;
2:   }
2:   inline ssize_t full_write(int fd, const char* const beg, size_t len)
2:   {
2:     return full_write(fd, beg, beg + len) - beg;
2:   }
2: } // namespace sys
2: 
2: #define L(x) x, sizeof(x) - 1
2: 
2: 
2: namespace std
2: {
2:   void        abort() __attribute__((__noreturn__));
2:   inline void abort()
2:   {
2:     do
2:     {
2:       asm("int3");
2:     } while(true);
2:   }
2:   void terminate() noexcept __attribute__((__noreturn__));
2:   using ::free;
2:   using ::malloc;
2:   using ::memset;
2:   using ::realloc;
2:   using ::size_t;
2:   enum nothrow_t
2:   {
2:   };
2:   extern const nothrow_t nothrow;
2:   typedef void (*new_handler)();
2: }
2: extern "C"
2: {
2:   void        abort() __attribute__((__noreturn__));
2:   inline void abort()
2:   {
2:     do
2:     {
2:       asm("int3");
2:     } while(true);
2:   }
2: }
2: 
2: #undef AAI
2: #define _GLIBCXX_NOEXCEPT noexcept
2: #ifndef _GLIBCXX_NOTHROW
2: #define _GLIBCXX_NOTHROW
2: #endif
2: #endif
FILE: 3: inc/types.hh
FILE: 3: inc/types.hh
3: #ifndef types_hh
3: #define types_hh types_hh
3: 
3: typedef char* ostr_t;
3: typedef const char* istr_t;
3: typedef istr_t istr_v[];
3: typedef signed char int8_t;
3: typedef unsigned char uint8_t;
3: typedef int   int32_t;
3: typedef int32_t* int32_p;
3: typedef long  int64_t;
3: typedef unsigned uint32_t;
3: typedef uint32_t* uint32_p;
3: typedef unsigned long uint64_t;
3: typedef uint64_t* uint64_p;
3: typedef unsigned short int uint16_t;
3: typedef void* void_p;
3: 
3: struct iocb;
3: typedef long int __fd_mask;
3: struct fd_set
3: {
3:   __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
3: };
3: typedef fd_set* fd_set_p;
3: struct sigaction_t {
3: 	void (*sa_handler) (int);
3: 	unsigned long sa_flags;
3: 	void (*sa_restorer) (void);
3: 	unsigned long sa_mask;
3: };
3: struct stat_t {
3:   uint64_t  st_dev;
3:   uint64_t  st_ino;
3:   uint32_t  st_mode;
3:   uint32_t  st_nlink;
3:   uint32_t  st_uid;
3:   uint32_t  st_gid;
3:   uint64_t  st_rdev;
3:   uint64_t  __pad1;
3:   int64_t   st_size;
3:   int32_t   st_blksize;
3:   int32_t   __pad2;
3:   int64_t   st_blocks;
3:   int64_t   st_atime;
3:   uint64_t  st_atime_nsec;
3:   int64_t   st_mtime;
3:   uint64_t  st_mtime_nsec;
3:   int64_t   st_ctime;
3:   uint64_t  st_ctime_nsec;
3:   uint32_t  __unused4;
3:   uint32_t  __unused5;
3: };
3: typedef sigaction_t* sigaction_p;
3: typedef uint64_t sigset_t;
3: typedef sigset_t *sigset_p;
3: struct iovec;
3: typedef iovec* iovec_p;
3: struct timeval;
3: typedef timeval* timeval_p;
3: struct sockaddr;
3: typedef sockaddr* sockaddr_p;
3: struct shmid_ds;
3: typedef shmid_ds* shmid_ds_p;
3: struct itimerval;
3: typedef itimerval* itimerval_p;
3: struct msghdr;
3: typedef msghdr* msghdr_p;
3: struct rusage;
3: typedef rusage* rusage_p;
3: struct utsname;
3: struct utsname
3: {
3:   char sysname[65];
3:   char nodename[65];
3:   char release[65];
3:   char version[65];
3:   char machine[65];
3:   char domainname[65];
3: };
3: typedef utsname* utsname_p;
3: struct sembuf;
3: typedef sembuf* sembuf_p;
3: struct msgbuf;
3: typedef msgbuf* msgbuf_p;
3: 
3: struct msqid_ds;
3: typedef msqid_ds* msqid_ds_p;
3: typedef int qid_t;
3: struct linux_dirent;
3: typedef linux_dirent* linux_dirent_p;
3: struct linux_dirent64;
3: typedef linux_dirent64* linux_dirent64_p;
3: struct sigevent;
3: typedef sigevent* sigevent_p;
3: struct timer_t;
3: typedef timer_t* timer_p;
3: struct timezone;
3: typedef timezone* timezone_p;
3: struct rlimit;
3: typedef rlimit* rlimit_p;
3: struct rlimit64;
3: struct file_handle;
3: typedef file_handle* file_handle_p;
3: typedef rlimit64* rlimit64_p;
3: struct sysinfo;
3: struct cap_user_header;
3: struct siginfo_t;
3: typedef siginfo_t* siginfo_p;
3: struct stack_t;
3: typedef stack_t* stack_p;
3: struct utimbuf;
3: typedef utimbuf* utimbuf_p;
3: struct cap_user_data;
3: struct ustat;
3: typedef ustat* ustat_p;
3: struct statfs;
3: struct bpf_attr;
3: typedef bpf_attr* bpf_attr_p;
3: struct sched_attr;
3: typedef sched_attr* sched_attr_p;
3: struct sched_param;
3: typedef sched_param* sched_param_p;
3: struct sysctl_args;
3: typedef sysctl_args* sysctl_args_p;
3: struct task_struct;
3: typedef task_struct* task_struct_p;
3: struct timex;
3: typedef timex* timex_p;
3: struct vptr_t;
3: struct pt_regs;
3: typedef pt_regs* pt_regs_p;
3: struct aio_context_t;
3: typedef aio_context_t* aio_context_p;
3: struct io_event;
3: typedef io_event* io_event_p;
3: struct iocb;
3: struct itimerspec;
3: typedef itimerspec* itimerspec_p;
3: struct epoll_event;
3: typedef epoll_event* epoll_event_p;
3: struct mq_attr;
3: typedef mq_attr* mq_attr_p;
3: struct stat;
3: struct pollfd;
3: typedef pollfd* pollfd_p;
3: typedef stat* stat_p;
3: typedef iocb* iocb_p;
3: typedef cap_user_header* cap_user_header_t;
3: typedef int mqd_t;
3: typedef cap_user_data* cap_user_data_t;
3: typedef sysinfo* sysinfo_p;
3: typedef statfs* statfs_p;
3: typedef int key_t;
3: typedef key_t* key_p;
3: typedef int sig_t;
3: typedef sig_t* sig_p;
3: typedef int uid_t;
3: typedef uid_t* uid_p;
3: typedef int gid_t;
3: typedef gid_t* gid_p;
3: typedef int umode_t;
3: struct kexec_segment;
3: typedef kexec_segment* kexec_segment_p;
3: struct robust_list_head;
3: typedef robust_list_head* robust_list_head_p;
3: //   typedef int64_t quad_t;
3: //   typedef char_ptr caddr_t;
3: //   typedef int32_t daddr_t;
3: typedef int32_t key_t;
3: typedef int32_t pid_t;
3: //   typedef int32_t sig_atomic_t;
3: //   typedef int64_t blkcnt64_t;
3: //   typedef int64_t blkcnt_t;
3: //   typedef int64_t blksize_t;
3: //   typedef int64_t fsword_t;
3: //   typedef int64_t intmax_t;
3: typedef long errno_t;
3: typedef int64_t intptr_t;
3: typedef uint64_t uintptr_t;
3: typedef int64_t off64_t;
3: typedef uint32_t fd_t;
3: typedef fd_t* fd_p;
3: struct pollfd_t {
3:   fd_t   fd;
3:   short events;
3:   short revents;
3: };
3: typedef int64_t clock_t;
3: typedef int64_t off_t;
3: typedef off_t* off_p;
3: struct perf_event_attr;
3: typedef perf_event_attr* perf_event_attr_p;
3: typedef int64_t suseconds_t;
3: typedef int64_t syscall_slong_t;
3: typedef int32_t clockid_t;
3: typedef int64_t time_t;
3: typedef time_t* time_p;
3: namespace std {
3: typedef int64_t ptrdiff_t;
3: };
3: using std::ptrdiff_t;
3: typedef uint32_t mode_t;
3: typedef uint64_t size_t;
3: typedef uint64_t* size_p;
3: typedef int64_t ssize_t;
3: typedef uint64_t ino64_t;
3: struct timeval
3: {
3:   time_t tv_sec;
3:   int64_t tv_nsec;
3: };
3: struct timespec
3: {
3:   time_t tv_sec;
3:   int64_t tv_nsec;
3: };
3: typedef timespec timespec_t;
3: enum ftype_t {
3: 	DT_UNKNOWN = 0,
3: 	DT_FIFO = 1,
3: 	DT_CHR = 2,
3: 	DT_DIR = 4,
3: 	DT_BLK = 6,
3: 	DT_REG = 8,
3: 	DT_LNK = 10,
3: 	DT_SOCK = 12,
3: 	DT_WHT = 14
3: };
3: struct linux_dirent {
3: 	ino64_t        d_ino;    /* 64-bit inode number */
3: 	off64_t        d_off;    /* 64-bit offset to next structure */
3: 	unsigned short d_reclen; /* Size of this dirent */
3: 	unsigned char  d_type;   /* File type */
3: 	char           d_name[]; /* Filename (null-terminated) */
3: 
3: 	linux_dirent *next() {
3: 		return (linux_dirent*)(((char*)this)+this->d_reclen);
3: 	};
3: };
3: struct iovec {
3: 	void  *iov_base;
3: 	size_t iov_len;
3: };
3: 
3: typedef timespec* timespec_p;
3: 
3: #define NULL nullptr
3: //#define offsetof(type, field)	((long) &((type *)0)->field)
3: #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)
3: 
3: #endif
FILE: 4: 
